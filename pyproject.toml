[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rodent-ai-vision-box"
version = "1.0.0"
description = "AI-powered rodent detection system for real-time monitoring and alerts"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "AI Vision Systems", email = "support@aivisionsystems.com"}
]
maintainers = [
    {name = "AI Vision Systems", email = "support@aivisionsystems.com"}
]
keywords = [
    "computer-vision",
    "yolo",
    "object-detection",
    "rodent-detection",
    "ai",
    "machine-learning",
    "raspberry-pi",
    "iot",
    "home-automation"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

dependencies = [
    "numpy>=1.21.0",
    "opencv-python>=4.5.0",
    "onnxruntime>=1.12.0",
    "twilio>=7.0.0",
    "PyYAML>=6.0",
    "python-dotenv>=0.19.0",
    "Pillow>=9.0.0",
    "requests>=2.28.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "isort>=5.10.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/rodent-ai-vision-box"
Documentation = "https://rodent-ai-vision-box.readthedocs.io"
Repository = "https://github.com/yourusername/rodent-ai-vision-box"
"Bug Tracker" = "https://github.com/yourusername/rodent-ai-vision-box/issues"

[project.scripts]
rodent-detect = "src.main:main"
rodent-test-twilio = "test_twilio:main"

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.venv
  | build
  | dist
  | dataset
  | colab
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip = ["dataset", "colab", ".venv"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = """
    -ra
    --strict-markers
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
"""

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_unimported = false
no_implicit_optional = true
check_untyped_defs = true
ignore_missing_imports = true
exclude = ["dataset", "colab", "docs", "build", "dist"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py", "*/__pycache__/*", "*/dataset/*", "*/colab/*", "*/scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]